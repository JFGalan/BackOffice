// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Place_my_bet.Models;

namespace Place_my_bet.Migrations
{
    [DbContext(typeof(PlaceMyBetContext))]
    [Migration("20210110160838_placemybet")]
    partial class placemybet
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Place_my_bet.Models.Apuesta", b =>
                {
                    b.Property<int>("ApuestaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("Dinero_Apostado")
                        .HasColumnType("double");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MercadoId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo_Apuesta")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Tipo_Cuota")
                        .HasColumnType("double");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("ApuestaId");

                    b.HasIndex("MercadoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Apuestas");

                    b.HasData(
                        new
                        {
                            ApuestaId = 1,
                            Dinero_Apostado = 50.0,
                            Fecha = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MercadoId = 1,
                            Tipo_Apuesta = "OVER",
                            Tipo_Cuota = 1.8999999999999999,
                            UsuarioId = "Alba@yahoo.com"
                        },
                        new
                        {
                            ApuestaId = 2,
                            Dinero_Apostado = 50.0,
                            Fecha = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MercadoId = 2,
                            Tipo_Apuesta = "UNDER",
                            Tipo_Cuota = 1.6599999999999999,
                            UsuarioId = "Lupo@icloud.com"
                        },
                        new
                        {
                            ApuestaId = 3,
                            Dinero_Apostado = 50.0,
                            Fecha = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MercadoId = 3,
                            Tipo_Apuesta = "OVER",
                            Tipo_Cuota = 1.8999999999999999,
                            UsuarioId = "Yelstin@icloud.com"
                        },
                        new
                        {
                            ApuestaId = 4,
                            Dinero_Apostado = 50.0,
                            Fecha = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MercadoId = 4,
                            Tipo_Apuesta = "OVER",
                            Tipo_Cuota = 1.8999999999999999,
                            UsuarioId = "Gamelin@gmail.com"
                        });
                });

            modelBuilder.Entity("Place_my_bet.Models.Cuenta", b =>
                {
                    b.Property<long>("TarjetaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("Nombre_Banco")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("Saldo_Actual")
                        .HasColumnType("double");

                    b.Property<string>("UsuarioId")
                        .IsRequired()
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("TarjetaId");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Cuentas");

                    b.HasData(
                        new
                        {
                            TarjetaId = 5168565334325460L,
                            Nombre_Banco = "BBVA",
                            Saldo_Actual = 299.12,
                            UsuarioId = "Gamelin@gmail.com"
                        },
                        new
                        {
                            TarjetaId = 5203550659869059L,
                            Nombre_Banco = "Santander",
                            Saldo_Actual = 1527.7,
                            UsuarioId = "Leon@gmail.com"
                        },
                        new
                        {
                            TarjetaId = 5219971858205527L,
                            Nombre_Banco = "Bankia",
                            Saldo_Actual = 3359.1199999999999,
                            UsuarioId = "Lupo@icloud.com"
                        },
                        new
                        {
                            TarjetaId = 5328163982660763L,
                            Nombre_Banco = "La Caixa",
                            Saldo_Actual = 1257.22,
                            UsuarioId = "Yelstin@icloud.com"
                        },
                        new
                        {
                            TarjetaId = 5409682368847308L,
                            Nombre_Banco = "IGN",
                            Saldo_Actual = 2527.6999999999998,
                            UsuarioId = "Alba@yahoo.com"
                        });
                });

            modelBuilder.Entity("Place_my_bet.Models.Evento", b =>
                {
                    b.Property<int>("EventoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Dia")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Equipo_Local")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Equipo_Visitante")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("EventoId");

                    b.ToTable("Eventos");

                    b.HasData(
                        new
                        {
                            EventoId = 1,
                            Dia = "2021/01/10",
                            Equipo_Local = "Valencia C.F",
                            Equipo_Visitante = "F.C Barcelona"
                        },
                        new
                        {
                            EventoId = 2,
                            Dia = "2021/01/10",
                            Equipo_Local = "Cádiz C.F",
                            Equipo_Visitante = "Madrid C.F"
                        },
                        new
                        {
                            EventoId = 3,
                            Dia = "2021/01/10",
                            Equipo_Local = "Levante C.F",
                            Equipo_Visitante = "Getafe C.F"
                        });
                });

            modelBuilder.Entity("Place_my_bet.Models.Mercado", b =>
                {
                    b.Property<int>("MercadoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Bloqueado")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Cuota_Over")
                        .HasColumnType("double");

                    b.Property<double>("Cuota_Under")
                        .HasColumnType("double");

                    b.Property<double>("Dinero_Over")
                        .HasColumnType("double");

                    b.Property<double>("Dinero_Under")
                        .HasColumnType("double");

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<double>("Tipo_over_under")
                        .HasColumnType("double");

                    b.HasKey("MercadoId");

                    b.HasIndex("EventoId");

                    b.ToTable("Mercados");

                    b.HasData(
                        new
                        {
                            MercadoId = 1,
                            Bloqueado = false,
                            Cuota_Over = 1.8999999999999999,
                            Cuota_Under = 1.8999999999999999,
                            Dinero_Over = 100.0,
                            Dinero_Under = 100.0,
                            EventoId = 1,
                            Tipo_over_under = 2.5
                        },
                        new
                        {
                            MercadoId = 2,
                            Bloqueado = false,
                            Cuota_Over = 2.2200000000000002,
                            Cuota_Under = 1.6599999999999999,
                            Dinero_Over = 150.0,
                            Dinero_Under = 200.0,
                            EventoId = 2,
                            Tipo_over_under = 3.5
                        },
                        new
                        {
                            MercadoId = 3,
                            Bloqueado = false,
                            Cuota_Over = 1.8999999999999999,
                            Cuota_Under = 1.8999999999999999,
                            Dinero_Over = 450.0,
                            Dinero_Under = 450.0,
                            EventoId = 3,
                            Tipo_over_under = 1.5
                        },
                        new
                        {
                            MercadoId = 4,
                            Bloqueado = false,
                            Cuota_Over = 1.8999999999999999,
                            Cuota_Under = 1.8999999999999999,
                            Dinero_Over = 900.0,
                            Dinero_Under = 900.0,
                            EventoId = 3,
                            Tipo_over_under = 1.5
                        });
                });

            modelBuilder.Entity("Place_my_bet.Models.Usuario", b =>
                {
                    b.Property<string>("EmailId")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Fecha_Registro")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("EmailId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            EmailId = "Alba@yahoo.com",
                            Apellidos = "Keylin Abradelo",
                            Edad = 33,
                            Fecha_Registro = "2020/11/12",
                            Nombre = "Alba"
                        },
                        new
                        {
                            EmailId = "Gamelin@gmail.com",
                            Apellidos = "Gamelín Prieto",
                            Edad = 21,
                            Fecha_Registro = "2020/11/12",
                            Nombre = "Pedro"
                        },
                        new
                        {
                            EmailId = "Leon@gmail.com",
                            Apellidos = "Valiente López",
                            Edad = 41,
                            Fecha_Registro = "2020/11/13",
                            Nombre = "León"
                        },
                        new
                        {
                            EmailId = "Lupo@icloud.com",
                            Apellidos = "Cabezali García",
                            Edad = 24,
                            Fecha_Registro = "2020/11/13",
                            Nombre = "Lobo"
                        },
                        new
                        {
                            EmailId = "Yelstin@icloud.com",
                            Apellidos = "Huiri Kabeut",
                            Edad = 18,
                            Fecha_Registro = "2020/11/14",
                            Nombre = "Yelstin"
                        });
                });

            modelBuilder.Entity("Place_my_bet.Models.Apuesta", b =>
                {
                    b.HasOne("Place_my_bet.Models.Mercado", "Mercado")
                        .WithMany("Apuestas")
                        .HasForeignKey("MercadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Place_my_bet.Models.Usuario", "Usuario")
                        .WithMany("Apuestas")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Place_my_bet.Models.Cuenta", b =>
                {
                    b.HasOne("Place_my_bet.Models.Usuario", "Usuario")
                        .WithOne("Cuenta")
                        .HasForeignKey("Place_my_bet.Models.Cuenta", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Place_my_bet.Models.Mercado", b =>
                {
                    b.HasOne("Place_my_bet.Models.Evento", "Evento")
                        .WithMany("Mercados")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
